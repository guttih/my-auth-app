// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AuthProvider {
  LOCAL
  AD
  GOOGLE
}

enum Role {
  VIEWER
  MODERATOR
  ADMIN
}

enum Theme {
  light
  dark
}

model User {
  id            String   @id @default(uuid())
  // --- Standard NextAuth fields (ADD these 4) ---
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  // --- Your fields (keep) ---
  username      String   @unique
  passwordHash  String?
  authProvider  AuthProvider @default(LOCAL)
  role          Role     @default(VIEWER)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
  theme         Theme    @default(light)
  profileImage  String?

  accounts      Account[]
  sessions      Session[]   // <-- add relation for completeness
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  ext_expires_in             Int?
  refresh_token_expires_in   Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
